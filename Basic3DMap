# This code comes under the assumption that I am using data from a csv file called 'Dose.csv' 

# This is a pretty simple code for turning the X, Y, Z, and dose data columns in a typical CSV from TOPAS into a 3D model/heat map type of thing

import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Read the CSV file
data = pd.read_csv('Dose.csv')

# Extract x, y, z, and dose columns from the CSV
x = data['X']
y = data['Y']
z = data['Z']
dose = data['Dose']

# Create a 3D figure
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plot the dose distribution
ax.scatter(x, y, z, c=dose, cmap='jet')

# Set labels and title
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('3D Dose Distribution')

# Add a colorbar
cbar = fig.colorbar(ax.scatter(x, y, z, c=dose, cmap='jet'))
cbar.set_label('Dose')

# Show the plot
plt.show()

--------------------------------------------

# This one is pretty much the same thing, but I put in an important filter and changed the data extracting to the filtered data to eliminate dose values of 0

import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# Read the CSV file
data = pd.read_csv('Dose.csv')

# Filter out points with dose value of 0
filtered_data = data[data['Dose'] != 0]

# Extract x, y, z, and dose columns
x = filtered_data['X']
y = filtered_data['Y']
z = filtered_data['Z']
dose = filtered_data['Dose']

# Create a 3D figure
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Plot the dose distribution
ax.scatter(x, y, z, c=dose, cmap='jet')

# Set labels and title
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('Z')
ax.set_title('3D Dose Distribution')

# Add a colorbar
cbar = fig.colorbar(ax.scatter(x, y, z, c=dose, cmap='jet'))
cbar.set_label('Dose')

# Show the plot
plt.show()


# On this model it could also be beneficial to edit the filter to leave out different values
# I used some >, <, etc. functions to eliminate the data I did not want

------------------------------------------

# How to make a simple histogram from a single column of data in a csv file ('BiggerDose.csv' and column->'Dose')

import pandas as pd
import matplotlib.pyplot as plt

# Read the csv file using pandas
data = pd.read_csv('BiggerDose.csv')

# Extract the specific column data that you want
dose_data = data['Dose']

# Create the histogram
plt.hist(dose_data, bins=10, edgecolor='blue')

# Add some axis titles and everything
plt.xlabel('Dose')
plt.ylabel('# of Voxels')
plt.title('Histogram of Dosage')

# Produce the plot
plt.show()

-----------------------------------------

# Here is my 2D 'Heat Map' of the data taken from the X plane where the beam is impacting orthogonally
# Note: make sure the set value of the plane is a location that is being scored and has values 
import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file
data = pd.read_csv('Water.csv')

# Set the desired z-value to keep constant
constant_x = 2.0

# Filter the data based on the desired z-value
subset = data[data['X'] == constant_x]

# Extract x, y, and dose columns for the constant z-value
z = subset['Z']
y = subset['Y']
dose = subset['Dose']

# Reshape the data for a 2D plot
grid_size = int(len(z) ** 0.5)
z = z.values.reshape((grid_size, grid_size))
y = y.values.reshape((grid_size, grid_size))
dose = dose.values.reshape((grid_size, grid_size))

# Create a 2D plot
plt.imshow(dose, cmap='jet', origin='lower', extent=[z.min(), z.max(), y.min(), y.max()])
plt.colorbar(label='Dose')

# Set labels and title
plt.xlabel('X')
plt.ylabel('Y')
plt.title('2D Dose Distribution (x = {})'.format(constant_x))

# Show the plot
plt.show()

------------------------------------------

# Here is my simple line plot example that will serve as a dose-depth chart for making sure my patterns in different EBRTs were correct
import pandas as pd
import matplotlib.pyplot as plt

# Read the CSV file
data = pd.read_csv('Water.csv')

# Extract the x and y values from the CSV data
x = data['X']
y = data['Dose']

# Create a line plot
plt.plot(x, y)

# Set labels and title
plt.xlabel('Depth')
plt.ylabel('Dose')
plt.title('DD')

# Show the plot
plt.show()

# Even though I only used 10 x-coordinate locations (ie the plot was not smooth), the trends were pretty obviously correct, which was all I wanted to confirm

--------------------------------------------

# Here is a combination of most of the helpful figures I need to produce to look at some of the local dose trends that gives the 2D Heat Map, the Percentage Histogram, and spits out some helpful numbers that I like to have 

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Read the CSV file
data = pd.read_csv('Flat.csv')

# Info I want to have
# Pick out the column that you want
column = data['Dose']

# Command the average
average = column.mean()

# Print the value
print("Average:", average)

# Count the number of non-zero values
non_zero_count = (column != 0).sum()

# Print the count
print("Number of non-zero values:", non_zero_count)

# Want the largest number
largest_number = max(column)

print("The largest number in the data set is:", largest_number)

# What is the x value of the maximum dose
# Find the row with the maximum dose
max_dose_row = data.loc[data['Dose'].idxmax()]

# Get the x-value from the row
x_value = max_dose_row['X']

# Print the x-value
print("The x-value at which the maximum dose occurs is:", x_value)

# What is the z value of the maximum dose
# Find the row with the maximum dose
max_dose_row = data.loc[data['Dose'].idxmax()]

# Get the x-value from the row
z_value = max_dose_row['Z']

# Print the x-value
print("The z-value at which the maximum dose occurs is:", z_value)

# For the Heat Map
# Set the desired z-value to keep constant
constant_z = 5.0

# Filter the data based on the desired z-value
subset = data[data['Z'] == constant_z]

# Extract x, y, and dose columns for the constant z-value
x = subset['X']
y = subset['Y']
dose = subset['Dose']

# Reshape the data for a 2D plot
grid_size = int(len(x) ** 0.5)
x = x.values.reshape((grid_size, grid_size))
y = y.values.reshape((grid_size, grid_size))
dose = dose.values.reshape((grid_size, grid_size))

# Create a 2D plot
plt.imshow(dose, cmap='jet', vmin=0, vmax=10e-5, origin='lower', extent=[x.min(), x.max(), y.min(), y.max()])
plt.colorbar(label='Dose')

# Set labels and title
plt.xlabel('X')
plt.ylabel('Y')
plt.title('2D Dose Distribution (Z = {})'.format(constant_z))

# Set a Dose Scale Limit


# Show the plot
plt.show()

# Calculate the histogram
hist, bins = np.histogram(column, bins=100, range=(0, 10e-5))

# Calculate the percentage for each bin
percentage = (hist / len(column)) * 100

# Plot the histogram
plt.bar(bins[:-1], percentage, width=np.diff(bins), align='edge')

# Set the axis labels and title
plt.xlabel('Dose')
plt.ylabel('Percentage of Points')
plt.title('Dose Distribution Histogram')

# Show the plot
plt.show()

